// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	context "context"

	rabbitmq "github.com/Saulius-Saulys/users-service/internal/messaging/rabbitmq"
	mock "github.com/stretchr/testify/mock"
)

// MockRabbitMQPublisher is an autogenerated mock type for the RabbitMQPublisher type
type MockRabbitMQPublisher struct {
	mock.Mock
}

type MockRabbitMQPublisher_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRabbitMQPublisher) EXPECT() *MockRabbitMQPublisher_Expecter {
	return &MockRabbitMQPublisher_Expecter{mock: &_m.Mock}
}

// PublishMessage provides a mock function with given fields: ctx, message
func (_m *MockRabbitMQPublisher) PublishMessage(ctx context.Context, message *rabbitmq.OutputMessage) error {
	ret := _m.Called(ctx, message)

	if len(ret) == 0 {
		panic("no return value specified for PublishMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *rabbitmq.OutputMessage) error); ok {
		r0 = rf(ctx, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRabbitMQPublisher_PublishMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishMessage'
type MockRabbitMQPublisher_PublishMessage_Call struct {
	*mock.Call
}

// PublishMessage is a helper method to define mock.On call
//   - ctx context.Context
//   - message *rabbitmq.OutputMessage
func (_e *MockRabbitMQPublisher_Expecter) PublishMessage(ctx interface{}, message interface{}) *MockRabbitMQPublisher_PublishMessage_Call {
	return &MockRabbitMQPublisher_PublishMessage_Call{Call: _e.mock.On("PublishMessage", ctx, message)}
}

func (_c *MockRabbitMQPublisher_PublishMessage_Call) Run(run func(ctx context.Context, message *rabbitmq.OutputMessage)) *MockRabbitMQPublisher_PublishMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*rabbitmq.OutputMessage))
	})
	return _c
}

func (_c *MockRabbitMQPublisher_PublishMessage_Call) Return(_a0 error) *MockRabbitMQPublisher_PublishMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRabbitMQPublisher_PublishMessage_Call) RunAndReturn(run func(context.Context, *rabbitmq.OutputMessage) error) *MockRabbitMQPublisher_PublishMessage_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRabbitMQPublisher creates a new instance of MockRabbitMQPublisher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRabbitMQPublisher(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRabbitMQPublisher {
	mock := &MockRabbitMQPublisher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
