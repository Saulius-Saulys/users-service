// Code generated by go-bindata. DO NOT EDIT.
// sources:
// V1.0__create_schema.sql (629B)

package migrations

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _v10__create_schemaSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\xd2\x41\x6b\x83\x30\x14\x07\xf0\xbb\x9f\xe2\x1d\x0d\x8c\xd1\x31\xc6\x0e\x3d\x65\x36\xc3\x30\x8d\x25\xc6\xcd\xf6\x22\xc1\x64\x10\x66\x6d\x31\x91\x6d\xdf\x7e\x18\x95\xad\x63\xac\xed\x3b\x88\xfa\xfe\x3f\x5e\x02\x2f\xe2\x04\x0b\x02\x79\x14\x93\x14\x03\x7d\x04\x96\x09\x20\x25\xcd\x45\x0e\xbd\xd5\x9d\x05\x5c\x88\x38\xe3\x74\x8b\x05\xcd\x18\x38\x6d\xdd\x32\x08\x26\x26\xf0\x43\x42\xc6\xdc\xb5\x7f\x06\x61\x00\x00\x60\x14\xcc\x55\x14\x74\x75\xe5\x7f\xbe\x9a\xce\xba\xaa\x95\x3b\x0d\xcf\x98\x47\x31\xe6\xe1\xfd\x1d\x82\xa3\x1a\xa6\xb3\x22\x49\x46\xd1\xc8\x19\x9c\x2b\x5a\x53\xbf\x8d\xe0\x5c\x71\x90\xd6\xbe\xef\xbb\xe1\xc0\x82\x94\x02\xfe\xaa\x63\xa1\x77\xd2\x34\x63\x63\x9e\x71\xb3\x58\xa0\x7f\x44\xbd\xef\x5b\xd7\x7d\x0e\xaf\x3e\x7e\x8b\x4e\xcd\xa8\x3b\x2d\x9d\x56\x95\x74\x20\x68\x4a\x72\x81\xd3\x35\xbc\x50\x11\xfb\x4f\xd8\x66\x8c\xfc\x12\xfd\x41\x5d\x28\x94\x6e\xf4\x49\xe1\xd3\x3e\xbe\xe6\x34\xc5\x7c\x03\x4f\x64\x03\xa1\x51\x28\x40\xdf\x7b\x40\xd9\x8a\x94\x60\xd4\x47\x35\x5d\xd5\x8b\x8c\xfd\x5c\x0d\x08\xa7\x1e\x5a\x7e\x05\x00\x00\xff\xff\x29\x81\x06\x49\x75\x02\x00\x00")

func v10__create_schemaSqlBytes() ([]byte, error) {
	return bindataRead(
		_v10__create_schemaSql,
		"V1.0__create_schema.sql",
	)
}

func v10__create_schemaSql() (*asset, error) {
	bytes, err := v10__create_schemaSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "V1.0__create_schema.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa2, 0xc3, 0x41, 0x7a, 0x39, 0xbf, 0x27, 0x68, 0x31, 0xe2, 0x89, 0x79, 0x77, 0xaa, 0xa2, 0x8f, 0x43, 0x1f, 0x15, 0xc5, 0x57, 0xb3, 0x9a, 0x73, 0x20, 0x8e, 0xf2, 0x1c, 0x83, 0x5b, 0xec, 0x3d}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"V1.0__create_schema.sql": v10__create_schemaSql,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"V1.0__create_schema.sql": {v10__create_schemaSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = os.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
