// Code generated by go-bindata. DO NOT EDIT.
// sources:
// V1.0__create_schema.sql (707B)

package migrations

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _v10__create_schemaSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x92\x5f\x4b\xf3\x30\x18\xc5\xef\xfb\x29\xce\x65\x0b\xef\x5e\x26\x22\x5e\xec\x2a\x6e\x91\x06\xd7\x76\xb4\xa9\x6e\xbb\x19\xb1\xcd\x30\xd8\x7f\x34\x29\xce\x6f\x2f\x4b\x5b\x71\x22\x6e\x9e\x8b\x90\xe4\x39\xbf\x9c\x27\xf0\xcc\x63\x4a\x38\x45\x32\xf7\x69\x40\xc0\xee\x11\x46\x1c\x74\xcd\x12\x9e\xa0\xd3\xb2\xd5\x20\x29\xf7\xa3\x98\x6d\x09\x67\x51\x08\x23\xb5\x99\x39\xce\x80\x71\x72\xb7\xa4\xbd\xef\xbf\x5d\x1d\xd7\x01\x00\x95\x63\x54\x9a\xb2\xc5\x3f\x7b\xb9\x57\xad\x36\xbb\x4a\x94\x12\x8f\x24\x9e\xfb\x24\x76\x6f\x6f\x3c\x9c\xe8\x98\x1e\xa6\xcb\x65\x4f\x14\x62\x04\x2e\x25\x2a\x95\xbd\xf6\xc0\xa5\x44\x23\xb4\x7e\xab\xdb\x63\xc3\x9c\xae\x39\x7e\xd2\x29\x21\x4b\xa1\x8a\xbe\x30\x66\x5c\x4d\xa7\xde\x2f\x44\x56\x77\x95\x69\xdf\x8f\x5b\x6b\xbf\xf6\xce\x65\x64\xad\x14\x46\xe6\x3b\x61\xc0\x59\x40\x13\x4e\x82\x15\x9e\x18\xf7\xed\x11\xdb\x28\xa4\xdf\x88\xae\xc9\xff\x48\xe4\xb2\x90\x67\x09\xeb\xb6\xf6\x55\xcc\x02\x12\x6f\xf0\x40\x37\x70\x55\xee\x39\xde\xcc\x71\x26\x13\xb0\x2a\x97\x07\xec\xeb\xf6\xf3\x9b\x43\xf3\x78\x96\x99\xe8\xb4\x84\x32\x50\x1a\x02\x59\x5d\x96\x75\x85\xbd\x2a\x8c\x6c\xa1\x2a\x98\x17\x09\xd1\x34\x85\xca\x84\x51\x75\x35\x4e\x15\x0b\x17\x74\x0d\x95\x1f\x76\xc3\x8b\x36\x3f\x0a\xbf\x0e\x1a\xdc\xa1\xe6\xcd\x3e\x02\x00\x00\xff\xff\xf3\x20\x2e\x20\xc3\x02\x00\x00")

func v10__create_schemaSqlBytes() ([]byte, error) {
	return bindataRead(
		_v10__create_schemaSql,
		"V1.0__create_schema.sql",
	)
}

func v10__create_schemaSql() (*asset, error) {
	bytes, err := v10__create_schemaSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "V1.0__create_schema.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x9f, 0x53, 0x74, 0x7d, 0x94, 0x12, 0x31, 0x8b, 0xd5, 0x9c, 0x4f, 0x2b, 0x39, 0xa9, 0xba, 0xa7, 0x95, 0x33, 0xf3, 0x2e, 0xbe, 0x97, 0x87, 0x2c, 0x32, 0x3c, 0x4d, 0x34, 0x42, 0xd7, 0xbf, 0x78}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"V1.0__create_schema.sql": v10__create_schemaSql,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"V1.0__create_schema.sql": {v10__create_schemaSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = os.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
