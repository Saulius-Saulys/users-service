// Code generated by go-bindata. DO NOT EDIT.
// sources:
// V1.0__create_schema.sql (634B)

package migrations

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _v10__create_schemaSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x92\xc1\x4b\xc3\x30\x14\xc6\xef\xfd\x2b\xde\xb1\x01\x91\x89\x88\x87\x9d\x62\x17\x69\xb0\x4d\x47\x9a\x6a\xb7\x4b\x09\x4d\x84\x60\xd7\x8d\x26\x45\xfd\xef\xa5\x69\x8b\x4e\xc4\x6d\xdf\x21\x24\xf9\xbe\x1f\xef\x3d\x78\x11\x27\x58\x10\xc8\xa3\x98\xa4\x18\xe8\x23\xb0\x4c\x00\x29\x69\x2e\x72\xe8\xad\xee\x2c\xe0\x42\xc4\x19\xa7\x5b\x2c\x68\xc6\xc0\x69\xeb\xaa\xc1\x58\x06\xc1\xc4\x0a\xfc\x90\x90\x31\x7c\xed\xcf\x20\x0c\x00\x00\x8c\x82\x59\x45\x41\x57\x57\xfe\xf3\xd5\x74\xd6\x55\xad\xdc\x69\x78\xc6\x3c\x8a\x31\x0f\xef\xef\x10\x1c\x69\x68\x81\x15\x49\x32\x12\x8d\x9c\x81\x73\x89\xd6\xd4\x6f\x23\x70\x2e\x71\x90\xd6\xbe\xef\xbb\xa1\x61\x41\x4a\x01\x7f\xe9\x98\xd0\x3b\x69\x9a\xd1\x98\x6b\xdc\x2c\x16\xe8\x1f\xa2\xde\xf7\xad\xeb\x3e\x87\xab\x8f\xdf\xa2\x53\x35\xea\x4e\x4b\xa7\x55\x25\x1d\x08\x9a\x92\x5c\xe0\x74\x0d\x2f\x54\xc4\xfe\x09\xdb\x8c\x91\x5f\x44\x7f\x50\x17\x12\x4a\x37\xfa\x24\xe1\xd3\x3e\xbe\xe6\x34\xc5\x7c\x03\x4f\x64\x03\xa1\x51\x28\x40\xdf\x7b\x40\xd9\x8a\x94\x60\xd4\x47\x35\x8d\xea\x89\x8c\xfd\x5c\x0d\x08\x27\x0f\x2d\xbf\x02\x00\x00\xff\xff\x90\x6f\xb3\xe8\x7a\x02\x00\x00")

func v10__create_schemaSqlBytes() ([]byte, error) {
	return bindataRead(
		_v10__create_schemaSql,
		"V1.0__create_schema.sql",
	)
}

func v10__create_schemaSql() (*asset, error) {
	bytes, err := v10__create_schemaSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "V1.0__create_schema.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xcc, 0x8, 0x4b, 0x21, 0xb0, 0x92, 0xc8, 0x76, 0xeb, 0xa9, 0xc9, 0x5d, 0xc4, 0xf8, 0xa9, 0x9b, 0x7d, 0xee, 0x81, 0x30, 0x54, 0xd3, 0xb1, 0xb5, 0x43, 0xc3, 0x62, 0x20, 0xb, 0xa7, 0x7c, 0x49}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"V1.0__create_schema.sql": v10__create_schemaSql,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"V1.0__create_schema.sql": {v10__create_schemaSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = os.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
